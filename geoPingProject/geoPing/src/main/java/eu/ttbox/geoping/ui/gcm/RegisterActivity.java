package eu.ttbox.geoping.ui.gcm;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.os.Bundle;
import android.util.Log;
import android.view.View;

import eu.ttbox.geoping.R;

/**
 * An activity that communicates with your App Engine backend via Cloud
 * Endpoints.
 * <p/>
 * When the user hits the "Register" button, a message is sent to the backend
 * (over endpoints) indicating that the device would like to receive broadcast
 * messages from it. Clicking "Register" also has the effect of registering this
 * device for Google Cloud Messaging (GCM). Whenever the backend wants to
 * broadcast a message, it does it via GCM, so that the device does not need to
 * keep polling the backend for messages.
 * <p/>
 * If you've generated an App Engine backend for an existing Android project,
 * this activity will not be hooked in to your main activity as yet. You can
 * easily do so by adding the following lines to your main activity:
 * <p/>
 * Intent intent = new Intent(this, RegisterActivity.class);
 * startActivity(intent);
 * <p/>
 * To make the sample run, you need to set your PROJECT_NUMBER in
 * GCMIntentService.java. If you're going to be running a local version of the
 * App Engine backend (using the DevAppServer), you'll need to toggle the
 * LOCAL_ANDROID_RUN flag in CloudEndpointUtils.java. See the javadoc in these
 * classes for more details.
 * <p/>
 * For a comprehensive walkthrough, check out the documentation at
 * http://developers.google.com/eclipse/docs/cloud_endpoints
 */
public class RegisterActivity extends Activity {

    private static final String TAG = "RegisterActivity";
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.gcm_register_activity);

       registerWithBackend();
    }

    public void onClickRegisterWithBackend(View v) {
        registerWithBackend();
    }
    private void registerWithBackend() {
        GcmRegisterAsyncTask task = new GcmRegisterAsyncTask(getApplicationContext(), endInSuccess, endInFailure);
        task.execute(GcmRegisterAsyncTask.PROJECT_NUMBER);
    }



    Runnable endInFailure = new Runnable() {
        @Override
        public void run() {
            setResult(RESULT_CANCELED);
            RegisterActivity.this.finish();
        }
    };

    Runnable endInSuccess = new Runnable() {
        @Override
        public void run() {
            setResult(RESULT_OK);
            RegisterActivity.this.finish();
        }
    };

    @Override
    protected void onNewIntent(Intent intent) {
        super.onNewIntent(intent);

    /*
     * If we are dealing with an intent generated by the GCMIntentService
     * class, then display the provided message.
     */
        if (intent.getBooleanExtra("gcmIntentServiceMessage", false)) {

            if (intent.getBooleanExtra("registrationMessage", false) && !intent.getBooleanExtra("error", false)) {
                showDialog(intent.getStringExtra("message"), endInSuccess);
            }
            else {
                showDialog(intent.getStringExtra("message"), endInFailure);
            }
        }
    }

    private void showDialog(String message, final Runnable okAction) {
        AlertDialog myDialog = new AlertDialog.Builder(this)
                .setMessage(message)
                .setPositiveButton(android.R.string.ok,
                        new DialogInterface.OnClickListener() {
                            public void onClick(DialogInterface dialog, int id) {
                                dialog.dismiss();
                            }
        }).create();
        myDialog.setOnDismissListener(new DialogInterface.OnDismissListener() {
            @Override
            public void onDismiss(DialogInterface dialogInterface) {
                if(okAction != null) {
                    okAction.run();
                }
            }
        });
        myDialog.show();
    }
}
